Index: base/shell/explorer/desktop/desktop.cpp
===================================================================
--- base/shell/explorer/desktop/desktop.cpp	(revision 62758)
+++ base/shell/explorer/desktop/desktop.cpp	(working copy)
@@ -326,8 +326,8 @@
 HWND DesktopWindow::Create()
 {
 	static IconWindowClass wcDesktop(TEXT("Progman"), IDI_REACTOS, CS_DBLCLKS);
-	/* (disabled because of small ugly temporary artefacts when hiding start menu)
-	wcDesktop.hbrBackground = (HBRUSH)(COLOR_BACKGROUND+1); */
+	/* (disabled because of small ugly temporary artefacts when hiding start menu) */
+	wcDesktop.hbrBackground = (HBRUSH)(COLOR_BACKGROUND+1);
 
 	int width = GetSystemMetrics(SM_CXSCREEN);
 	int height = GetSystemMetrics(SM_CYSCREEN);
Index: cmake/baseaddress.cmake
===================================================================
--- cmake/baseaddress.cmake	(revision 62758)
+++ cmake/baseaddress.cmake	(working copy)
@@ -1,7 +1,7 @@
 set(baseaddress_ntdll                0x7c920000) # should be above 0x7c920000
 set(baseaddress_kernel32             0x77d80000)
 set(baseaddress_msvcrt               0x77cd0000)
-set(baseaddress_advapi32             0x77c20000)
+set(baseaddress_advapi32             0x77c70000)
 set(baseaddress_gdi32                0x77bb0000)
 set(baseaddress_user32               0x77a20000)
 set(baseaddress_dhcpcsvc             0x779d0000)
@@ -272,6 +272,7 @@
 set(baseaddress_wbemprox             0x70c70000)
 set(baseaddress_windowscodecs        0x70b60000)
 set(baseaddress_windowscodecsext     0x70b30000)
+set(baseaddress_freetypd             0x709b0000)
 set(baseaddress_wined3d              0x70960000)
 set(baseaddress_winfax               0x70930000)
 set(baseaddress_wing32               0x70900000)
Index: cmake/config.cmake
===================================================================
--- cmake/config.cmake	(revision 62758)
+++ cmake/config.cmake	(working copy)
@@ -58,6 +58,9 @@
 "Whether to compile support for ELF files.
 Do not enable unless you know what you're doing.")
 
+set(_ARWINSS_ TRUE CACHE BOOL
+"Whether to build and use Wine-based Win32 subsystem.")
+
 set(NSWPAT FALSE CACHE BOOL
 "Whether to build apps/libs with features covered by software patents.
 If you live in a country where software patents are valid/apply, don't
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 62758)
+++ CMakeLists.txt	(working copy)
@@ -134,6 +134,10 @@
         add_definitions(-D_WINKD_=1)
     endif()
 
+    if(_ARWINSS_)
+        add_definitions(-D_ARWINSS_=1)
+    endif()
+
     if((NOT DEFINED PCH) AND (CMAKE_VERSION STREQUAL "2.8.12.1-ReactOS") AND (NOT CMAKE_C_COMPILER_ID STREQUAL "Clang"))
         set(PCH 1)
     else()
@@ -236,6 +240,9 @@
     add_subdirectory(subsystems)
     add_subdirectory(tools/wpp)
     add_subdirectory(win32ss)
+    if (_ARWINSS_)
+        add_subdirectory(arwinss)
+    endif()
 
     # Create {bootcd, livecd, bootcdregtest}.lst
     create_iso_lists()
Index: include/asm/syscalls.inc
===================================================================
--- include/asm/syscalls.inc	(revision 62758)
+++ include/asm/syscalls.inc	(working copy)
@@ -95,6 +95,7 @@
 
 MACRO(STUB_U, Name, ArgCount)
     MAKE_LABEL Zw&Name, %ArgCount * 4
+    MAKE_LABEL Name, %ArgCount * 4
     START_PROC Nt&Name, %ArgCount * 4
     STUBCODE_U Name, SyscallId, %ArgCount
     .ENDP
@@ -102,6 +103,7 @@
 ENDM
 
 MACRO(STUB_K, Name, ArgCount)
+    MAKE_LABEL Name, %ArgCount * 4
     START_PROC Zw&Name, %ArgCount * 4
     STUBCODE_K Name, SyscallId, %ArgCount
     .ENDP
Index: include/psdk/winddi.h
===================================================================
--- include/psdk/winddi.h	(revision 62758)
+++ include/psdk/winddi.h	(working copy)
@@ -2683,7 +2683,7 @@
     _In_ ULONG cjSize,
     _Out_bytecap_(cjSize) FONTINFO *pfi);
 
-#if (NTDDI_VERSION <= NTDDI_WINXP)
+#if 0//(NTDDI_VERSION <= NTDDI_WINXP)
 GAMMA_TABLES*
 APIENTRY
 FONTOBJ_pGetGammaTables(
Index: include/reactos/wine/config.h
===================================================================
--- include/reactos/wine/config.h	(revision 62758)
+++ include/reactos/wine/config.h	(working copy)
@@ -1,3 +1,5 @@
+#include "reactos/buildno.h"
+
 #define __WINE_CONFIG_H
 
 /* Define to a function attribute for Microsoft hotpatch assembly prefix. */
Index: lib/3rdparty/CMakeLists.txt
===================================================================
--- lib/3rdparty/CMakeLists.txt	(revision 62758)
+++ lib/3rdparty/CMakeLists.txt	(working copy)
@@ -2,7 +2,9 @@
 add_subdirectory(adns)
 add_subdirectory(bzip2)
 add_subdirectory(cardlib)
+if (NOT _ARWINSS_)
 add_subdirectory(freetype)
+endif ()
 add_subdirectory(fullfat)
 add_subdirectory(libmpg123)
 add_subdirectory(libsamplerate)
Index: subsystems/win32/csrsrv/init.c
===================================================================
--- subsystems/win32/csrsrv/init.c	(revision 62758)
+++ subsystems/win32/csrsrv/init.c	(working copy)
@@ -20,7 +20,7 @@
 /* DATA ***********************************************************************/
 
 // Debug Flag
-ULONG CsrDebug = 0; // 0xFFFFFFFF;
+ULONG CsrDebug = 0xFFFFFFFF;
 
 HANDLE CsrHeap = NULL;
 HANDLE CsrObjectDirectory = NULL;
Index: win32ss/CMakeLists.txt
===================================================================
--- win32ss/CMakeLists.txt	(revision 62758)
+++ win32ss/CMakeLists.txt	(working copy)
@@ -6,7 +6,10 @@
 PROJECT(WIN32SS)
 
 add_subdirectory(drivers)
+add_subdirectory(user/winsrv)
 
+if (NOT _ARWINSS_)
+
 if(USE_DIBLIB)
     add_subdirectory(gdi/diblib)
 endif()
@@ -18,7 +21,6 @@
 add_subdirectory(gdi/gdi32)
 add_subdirectory(reactx)
 add_subdirectory(user/user32)
-add_subdirectory(user/winsrv)
 
 spec2def(win32k.sys win32k.spec ADD_IMPORTLIB)
 
@@ -243,3 +245,4 @@
 add_asm_files(win32ksys_asm sys-stubs.S)
 add_library(win32ksys ${win32ksys_asm})
 set_target_properties(win32ksys PROPERTIES LINKER_LANGUAGE "C")
+endif() # _ARWINSS_
\ No newline at end of file
Index: win32ss/drivers/CMakeLists.txt
===================================================================
--- win32ss/drivers/CMakeLists.txt	(revision 62758)
+++ win32ss/drivers/CMakeLists.txt	(working copy)
@@ -1,6 +1,8 @@
 
 add_subdirectory(displays)
+if (NOT _ARWINSS_)
 add_subdirectory(font)
+endif ()
 add_subdirectory(miniport)
 add_subdirectory(videoprt)
 add_subdirectory(watchdog)
Index: win32ss/include/ntgdihdl.h
===================================================================
--- win32ss/include/ntgdihdl.h	(revision 62758)
+++ win32ss/include/ntgdihdl.h	(working copy)
@@ -270,6 +270,7 @@
     DWORD           dwCFCount;
 } GDI_SHARED_HANDLE_TABLE, *PGDI_SHARED_HANDLE_TABLE;
 
+#ifndef _ARWINSS_
 typedef struct _RGN_ATTR
 {
     ULONG AttrFlags;
@@ -357,6 +358,19 @@
     RGN_ATTR VisRectRegion;
 } DC_ATTR, *PDC_ATTR;
 
+#else
+
+typedef struct _DC_ATTR
+{
+    HDC  hdc;
+    HDC  hKernelDC;
+    RECT dc_rect;     /* DC rectangle relative to drawable */
+    HRGN region;      /* Device region (visible region & clip region) */
+    int  cache_index; /* cache of a currently selected font */
+} DC_ATTR, *PDC_ATTR;
+
+#endif
+
 typedef struct _BRUSH_ATTR /* Used with pen too. */
 {
     FLONG    AttrFlags;
Index: win32ss/user/winsrv/consrv/conoutput.c
===================================================================
--- win32ss/user/winsrv/consrv/conoutput.c	(revision 62758)
+++ win32ss/user/winsrv/consrv/conoutput.c	(working copy)
@@ -77,9 +77,13 @@
      * Indeed, the palette handle comes from a console app
      * calling ourselves, running in CSRSS.
      */
+#ifndef _ARWINSS_
     NtUserConsoleControl(ConsoleMakePalettePublic,
                          &SetPaletteRequest->PaletteHandle,
                          sizeof(SetPaletteRequest->PaletteHandle));
+#else
+	UNIMPLEMENTED;
+#endif
 
     Status = ConDrvSetConsolePalette(Buffer->Header.Console,
                                      Buffer,
Index: win32ss/user/winsrv/consrv/frontends/gui/conwnd.c
===================================================================
--- win32ss/user/winsrv/consrv/frontends/gui/conwnd.c	(revision 62758)
+++ win32ss/user/winsrv/consrv/frontends/gui/conwnd.c	(working copy)
@@ -161,7 +161,11 @@
     }
     else
     {
+#ifndef _ARWINSS_
         NtUserConsoleControl(GuiConsoleWndClassAtom, &WndClassAtom, sizeof(ATOM));
+#else
+        UNIMPLEMENTED;
+#endif
     }
 
     return (WndClassAtom != 0);
Index: win32ss/user/winsrv/usersrv/init.c
===================================================================
--- win32ss/user/winsrv/usersrv/init.c	(revision 62758)
+++ win32ss/user/winsrv/usersrv/init.c	(working copy)
@@ -95,7 +95,9 @@
 WINAPI
 PrivateCsrssManualGuiCheck(LONG Check)
 {
+#ifndef _ARWINSS_
     NtUserCallOneParam(Check, ONEPARAM_ROUTINE_CSRSS_GUICHECK);
+#endif
 }
 
 ULONG
@@ -102,7 +104,13 @@
 NTAPI
 CreateSystemThreads(PVOID pParam)
 {
+#ifndef _ARWINSS_
     NtUserCallOneParam((DWORD)pParam, ONEPARAM_ROUTINE_CREATESYSTEMTHREADS);
+#else
+    while (TRUE)
+    {
+    }
+#endif
     DPRINT1("This thread should not terminate!\n");
     return 0;
 }
Index: win32ss/user/winsrv/usersrv/shutdown.c
===================================================================
--- win32ss/user/winsrv/usersrv/shutdown.c	(revision 62758)
+++ win32ss/user/winsrv/usersrv/shutdown.c	(working copy)
@@ -901,7 +901,11 @@
     NTSTATUS Status;
 
     /* FIXME Inside 2000 says we should impersonate the caller here */
+#ifndef _ARWINSS_
     Status = NtUserCallTwoParam(UserProcessId, Flags, TWOPARAM_ROUTINE_EXITREACTOS);
+#else
+    Status = 0;
+#endif
 
     /* If the message isn't handled, the return value is 0, so 0 doesn't indicate
        success. Success is indicated by a 1 return value, if anything besides 0
