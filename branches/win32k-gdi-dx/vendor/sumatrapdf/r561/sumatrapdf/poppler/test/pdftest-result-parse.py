# Parse results from the log file generated by pdftest.
# Present the most interesting information
import sys

def usageAndExit():
    print "Usage: pdftest-result-parse.py result-file.txt"
    sys.exit()

# keep info about a document as a a dict
class DocInfo: pass

# given text in "4.12 ms", return the "4.12" value as float number
def parseMsVal(txt):
    (num,rest) = txt.split(" ")
    assert rest == "ms"
    return float(num)

gMissingFonts = {}

def parseError(txt, docName):
    if not txt.startswith("Couldn't find a font for"):
        return
    (tmp,fontName) = txt.split(" '",1)
    fontName = fontName.strip()
    fontNameEnd = fontName.find("'")
    if -1 != fontNameEnd:
        fontName = fontName[:fontNameEnd]
    else:
        fontName = fontName[:-1]
    if fontName in gMissingFonts:
        (count, docNameList) = gMissingFonts[fontName]
        if docName not in docNameList:
            count += 1
            docNameList.append(docName)
        gMissingFonts[fontName] = (count, docNameList)
    else:
        gMissingFonts[fontName] = (1, [docName])

def sortByCount(s1,s2):
    return cmp(s2[1][0], s1[1][0])

def dumpMissingFonts():
    l = [(fontName,count) for (fontName,count) in gMissingFonts.iteritems()]
    l.sort(sortByCount)
    for el in l:
        print "%s missing %d times" % (el[0], el[1][0])

def sortByLoadTime(doc1, doc2):
    return cmp(doc2.loadTimeMs, doc1.loadTimeMs)

# 'docs' is an array of DocInfo class. Find 'n' documents that took longest
# to load
def findSlowestToLoad(docs, n):
    n = min(n, len(docs))
    docs.sort(sortByLoadTime)
    print "%d documents slowest to load:" % n
    for i in range(n):
        print "  %.2f (%d pages) %s" % (docs[i].loadTimeMs, docs[i].pageCount, docs[i].fileName)

    invalidDocs = [doc for doc in docs if 0 == doc.loadTimeMs]
    if len(invalidDocs) > 0:
        print "Those are probably invalid:"
        for doc in invalidDocs:
            print doc.fileName

def sortByRenderTime(s1, s2):
    return cmp(s2[1], s1[1])

def findSlowestToRender(docs, n):
    renderTimes = []
    for doc in docs:
        for pageNo in range(len(doc.pagesRenderTime)):
            renderTimes.append([pageNo+1, doc.pagesRenderTime[pageNo], doc])
    n = min(n, len(renderTimes))
    renderTimes.sort(sortByRenderTime)
    print "%d pages slowest to render:" % n
    for i in range (n):
        s = renderTimes[i]
        print " page %4d (time=%.2f) %s" % (s[0], s[1], s[2].fileName)

# given 'timeMs' time in milliseconds, return a human-readable string
# showing the time in hours/minutes/seconds e.g. "3 hours 5 min 3 sec"
def timeFormatted(timeMs):
    totalSecs = long(timeMs / 1000.0)
    secs = totalSecs % 60
    totalMins = totalSecs / 60
    mins = totalMins % 60
    hours = totalMins / 60
    txt = "%d hours %d mins %d secs" % (hours, mins, secs)
    #print "timeMs=%f, totalSecs %d is %s" % (timeMs, totalSecs, txt)
    return txt

def parseFile(fileName):
    fo = open(fileName, "r")
    lineCount = 0
    docs = []
    currDoc = None
    totalLoadMsTime = 0.0
    totalParseMsTime = 0.0
    totalPageCount = 0
    for line in fo.readlines():
        line = line.strip()
        lineCount += 1
        (key,val) = line.split(": ", 1)
        if key == "started":
            assert currDoc == None
            currDoc = DocInfo()
            currDoc.fileName = val
            currDoc.loadTimeMs = 0.0
            currDoc.pageCount = 0
            currDoc.pagesRenderTime = []
        elif key == "finished":
            assert currDoc != None
            docs.append(currDoc)
            currDoc = None
        elif key == "load":
            assert currDoc != None
            timeMs = parseMsVal(val)
            currDoc.loadTimeMs = timeMs
            totalLoadMsTime += timeMs
        elif key == "page count":
            assert currDoc != None
            currDoc.pageCount = int(val)
            totalPageCount += currDoc.pageCount
        elif key.startswith("page"):
            timeMs = parseMsVal(val)
            currDoc.pagesRenderTime.append(timeMs)
            totalParseMsTime += timeMs
        elif key == "Error":
            parseError(val, currDoc.fileName)
    fo.close()
    #print "lines:     %d" % lineCount
    print "documents: %d" % len(docs)
    print "pages:     %d" % totalPageCount

    print "total load time : %s" % timeFormatted(totalLoadMsTime)
    print "total parse time: %s" % timeFormatted(totalParseMsTime)
    dumpMissingFonts()
    findSlowestToLoad(docs, 25)
    findSlowestToRender(docs, 30)

def main():
    if len(sys.argv) != 2:
        usageAndExit()

    parseFile(sys.argv[1])

if __name__ == "__main__":
    main()

