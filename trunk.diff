Index: base/shell/explorer/desktop/desktop.cpp
===================================================================
--- base/shell/explorer/desktop/desktop.cpp	(revision 62316)
+++ base/shell/explorer/desktop/desktop.cpp	(working copy)
@@ -326,8 +326,8 @@
 HWND DesktopWindow::Create()
 {
 	static IconWindowClass wcDesktop(TEXT("Progman"), IDI_REACTOS, CS_DBLCLKS);
-	/* (disabled because of small ugly temporary artefacts when hiding start menu)
-	wcDesktop.hbrBackground = (HBRUSH)(COLOR_BACKGROUND+1); */
+	/* (disabled because of small ugly temporary artefacts when hiding start menu) */
+	wcDesktop.hbrBackground = (HBRUSH)(COLOR_BACKGROUND+1);
 
 	int width = GetSystemMetrics(SM_CXSCREEN);
 	int height = GetSystemMetrics(SM_CYSCREEN);
Index: cmake/baseaddress.cmake
===================================================================
--- cmake/baseaddress.cmake	(revision 62316)
+++ cmake/baseaddress.cmake	(working copy)
@@ -272,6 +272,7 @@
 set(baseaddress_wbemprox             0x70c70000)
 set(baseaddress_windowscodecs        0x70b60000)
 set(baseaddress_windowscodecsext     0x70b30000)
+set(baseaddress_freetypd             0x709b0000)
 set(baseaddress_wined3d              0x70960000)
 set(baseaddress_winfax               0x70930000)
 set(baseaddress_wing32               0x70900000)
Index: cmake/config.cmake
===================================================================
--- cmake/config.cmake	(revision 62316)
+++ cmake/config.cmake	(working copy)
@@ -58,6 +58,9 @@
 "Whether to compile support for ELF files.
 Do not enable unless you know what you're doing.")
 
+set(_ARWINSS_ TRUE CACHE BOOL
+"Whether to build and use Wine-based Win32 subsystem.")
+
 set(NSWPAT FALSE CACHE BOOL
 "Whether to compile apps/libs with features covered software patents or not.
 If you live in a country where software patents are valid/apply, don't
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 62316)
+++ CMakeLists.txt	(working copy)
@@ -134,6 +134,10 @@
         add_definitions(-D_WINKD_=1)
     endif()
 
+    if(_ARWINSS_)
+        add_definitions(-D_ARWINSS_=1)
+    endif()
+
     if((NOT DEFINED PCH) AND (CMAKE_VERSION STREQUAL "2.8.12.1-ReactOS"))
         set(PCH 1)
     else()
@@ -236,6 +240,9 @@
     add_subdirectory(subsystems)
     add_subdirectory(tools/wpp)
     add_subdirectory(win32ss)
+    if (_ARWINSS_)
+        add_subdirectory(arwinss)
+    endif()
 
     # Create {bootcd, livecd, bootcdregtest}.lst
     create_iso_lists()
Index: include/asm/syscalls.inc
===================================================================
--- include/asm/syscalls.inc	(revision 62316)
+++ include/asm/syscalls.inc	(working copy)
@@ -95,6 +95,7 @@
 
 MACRO(STUB_U, Name, ArgCount)
     MAKE_LABEL Zw&Name, %ArgCount * 4
+    MAKE_LABEL Name, %ArgCount * 4
     START_PROC Nt&Name, %ArgCount * 4
     STUBCODE_U Name, SyscallId, %ArgCount
     .ENDP
@@ -102,6 +103,7 @@
 ENDM
 
 MACRO(STUB_K, Name, ArgCount)
+    MAKE_LABEL Name, %ArgCount * 4
     START_PROC Zw&Name, %ArgCount * 4
     STUBCODE_K Name, SyscallId, %ArgCount
     .ENDP
Index: include/psdk/winddi.h
===================================================================
--- include/psdk/winddi.h	(revision 62316)
+++ include/psdk/winddi.h	(working copy)
@@ -2683,7 +2683,7 @@
     _In_ ULONG cjSize,
     _Out_bytecap_(cjSize) FONTINFO *pfi);
 
-#if (NTDDI_VERSION <= NTDDI_WINXP)
+#if 0//(NTDDI_VERSION <= NTDDI_WINXP)
 GAMMA_TABLES*
 APIENTRY
 FONTOBJ_pGetGammaTables(
Index: include/reactos/wine/config.h
===================================================================
--- include/reactos/wine/config.h	(revision 62316)
+++ include/reactos/wine/config.h	(working copy)
@@ -1,3 +1,5 @@
+#include "reactos/buildno.h"
+
 #define __WINE_CONFIG_H
 
 /* Define to a function attribute for Microsoft hotpatch assembly prefix. */
Index: lib/3rdparty/CMakeLists.txt
===================================================================
--- lib/3rdparty/CMakeLists.txt	(revision 62316)
+++ lib/3rdparty/CMakeLists.txt	(working copy)
@@ -2,7 +2,9 @@
 add_subdirectory(adns)
 add_subdirectory(bzip2)
 add_subdirectory(cardlib)
+if (NOT _ARWINSS_)
 add_subdirectory(freetype)
+endif ()
 add_subdirectory(fullfat)
 add_subdirectory(libmpg123)
 add_subdirectory(libsamplerate)
Index: lib/3rdparty/freetype/CMakeLists.txt
===================================================================
--- lib/3rdparty/freetype/CMakeLists.txt	(revision 62316)
+++ lib/3rdparty/freetype/CMakeLists.txt	(working copy)
@@ -11,7 +11,9 @@
   src/base/ftbbox.c
   src/base/ftbdf.c
   src/base/ftbitmap.c
+  src/base/ftcid.c
   src/base/ftdebug.c
+  src/base/ftfstype.c
   src/base/ftgasp.c
   src/base/ftglyph.c
   src/base/ftgxval.c
Index: win32ss/CMakeLists.txt
===================================================================
--- win32ss/CMakeLists.txt	(revision 62316)
+++ win32ss/CMakeLists.txt	(working copy)
@@ -7,6 +7,8 @@
 
 add_subdirectory(drivers)
 
+if (NOT _ARWINSS_)
+
 if(USE_DIBLIB)
     add_subdirectory(gdi/diblib)
 endif()
@@ -243,3 +245,4 @@
 add_asm_files(win32ksys_asm sys-stubs.S)
 add_library(win32ksys ${win32ksys_asm})
 set_target_properties(win32ksys PROPERTIES LINKER_LANGUAGE "C")
+endif() # _ARWINSS_
\ No newline at end of file
Index: win32ss/drivers/CMakeLists.txt
===================================================================
--- win32ss/drivers/CMakeLists.txt	(revision 62316)
+++ win32ss/drivers/CMakeLists.txt	(working copy)
@@ -1,6 +1,8 @@
 
 add_subdirectory(displays)
+if (NOT _ARWINSS_)
 add_subdirectory(font)
+endif ()
 add_subdirectory(miniport)
 add_subdirectory(videoprt)
 add_subdirectory(watchdog)
Index: win32ss/include/ntgdihdl.h
===================================================================
--- win32ss/include/ntgdihdl.h	(revision 62316)
+++ win32ss/include/ntgdihdl.h	(working copy)
@@ -270,6 +270,7 @@
     DWORD           dwCFCount;
 } GDI_SHARED_HANDLE_TABLE, *PGDI_SHARED_HANDLE_TABLE;
 
+#ifndef _ARWINSS_
 typedef struct _RGN_ATTR
 {
     ULONG AttrFlags;
@@ -357,6 +358,19 @@
     RGN_ATTR VisRectRegion;
 } DC_ATTR, *PDC_ATTR;
 
+#else
+
+typedef struct _DC_ATTR
+{
+    HDC  hdc;
+    HDC  hKernelDC;
+    RECT dc_rect;     /* DC rectangle relative to drawable */
+    HRGN region;      /* Device region (visible region & clip region) */
+    int  cache_index; /* cache of a currently selected font */
+} DC_ATTR, *PDC_ATTR;
+
+#endif
+
 typedef struct _BRUSH_ATTR /* Used with pen too. */
 {
     FLONG    AttrFlags;
